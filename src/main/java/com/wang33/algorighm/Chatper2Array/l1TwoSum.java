package com.wang33.algorighm.Chatper2Array;

/***
 *  @author wangyashuai
 *  @date 2023/1/6 下午4:33
 *
 */
public class l1TwoSum {
  /**
   *
   * 数组 是一种简单的数据结构，是由相同的数据元素组成的数据集合，并且占据一块连续的内存并按照数据存储数据。
   * 创建数据的时候，需要指定数组容量的大小，根据容量大小分配内存，即使只在数组中存储一个数字，也要为所有的数据预先分配内存
   * 所以数组的空间利用率不是很高
   * 为了解决数组空间效率不高的问题，人们又设计了动态数组。动态数组保留了时间效率高的特性，又能在数组中不断的添加元素。
   * 动态数组在内次扩容的时候，有大量的额外操作，这对时间性能有负面影响
   *
   * 双指针
   * 可以使用方向相同或者方向相反的双指针扫描数组，从而达到解题的目的。
   * 方向相反的双指针可以用来解排序数组中的两数之和
   * 方向相同的双指针，通常用来求证数组中子数组的和或积
   *
   * 面试题6 排序数组中的两数之和
   * 题目： 输入一个递增排序的数组和一个值k，请问如何在数组中找到两数之和为k的数字，并返回他们的下标
   *
   *
   * 解法1
   * 暴力解法，通过双重循环，判断，两数之和是否等于k，时间复杂度是O(n2)
   * 解法2
   * 对解法1进行优化，因为数组是有序的，可以使用二分查找,时间复杂度是O(nlogn)
   * 解法3
   * 可以把数组缓存到哈希表中，里层循环，在哈希表中查找，时间复杂度是O(n),空间复杂度是O(n)
   * 解法4
   * 通过双指针，左右两个指针分别指向0和最后一个，如果两数之和小于k，则左指针右移，两数之和会变大，
   * 如果两数之和小于k，则将右指针左移，两数之和会变小
   */

  public  int[] twoSum(int[] nums,int k){
    int i=0;
    int j = nums.length-1;
    while (i<j && nums[i] + nums[j] != k ){
      if(nums[i] + nums[j] > k){
        j--;
      }else {
        i++;
      }
    }
    return new int[]{i,j};
  }






}
